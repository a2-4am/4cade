;license:MIT
;(c) 2018-9 by 4am
;
; Double hi-res slideshows
;
; Public functions
; - DHGRTitleSlideshow
; - DHGRActionSlideshow
; - DHGRSingle
; - BlankHGR
; - HGRMode
;

;------------------------------------------------------------------------------
; DHGRTitleSlideshow
; execute a slideshow of double hi-res title screenshots
;
; safe to call if machine only has 64K (does nothing and exits)
;
; in:    none
; out:   everything clobbered
;        graphics mode reset to display hi-res screen, which is blank
;------------------------------------------------------------------------------
DHGRTitleSlideshow
         bit   MachineStatus         ; only run DHGR slideshow if we have 128K
         bvc   DHGRRTS
         jsr   LoadDHGRTransition    ; load transition effect code at $6000
         jsr   BlankDHGR             ; switch to DHGR mode with initial blank screen
         jsr   okvs_iter             ; cycle through all listed DHGR files
         !word gSlideshowStore
         !word DHGRTitleCallback     ; address of callback (called on each file)
         beq   BlankHGR              ; switch back to HGR mode with initial blank screen on exit
                                     ; (always branches because Z=1 on exit of okvs_iter)

;------------------------------------------------------------------------------
; DHGRActionSlideshow
; execute a slideshow of double hi-res action screenshots
;
; safe to call if machine only has 64K (does nothing and exits)
;
; in:    none
; out:   everything clobbered
;        graphics mode reset to display hi-res screen, which is blank
;------------------------------------------------------------------------------
DHGRActionSlideshow
         bit   MachineStatus         ; only run DHGR slideshow if we have 128K
         bvc   DHGRRTS
         jsr   LoadDHGRTransition    ; load transition effect code at $6000
         jsr   BlankDHGR             ; switch to DHGR mode with initial blank screen
         jsr   okvs_iter             ; cycle through all listed DHGR files
         !word gSlideshowStore
         !word DHGRActionCallback    ; address of callback (called on each file)
         beq   BlankHGR              ; switch back to HGR mode with initial blank screen on exit
                                     ; (always branches because Z=1 on exit of okvs_iter)

;------------------------------------------------------------------------------
; DHGRSingle
; display a single double hi-res screenshot, with transition effect
;
; safe to call if machine only has 64K (does nothing and exits)
;
; in:    none
; out:   everything clobbered
;        graphics mode reset to display hi-res screen, which is blank
;------------------------------------------------------------------------------
DHGRSingle
         bit   MachineStatus         ; only show DHGR screenshots if we have 128K
         bvc   DHGRRTS
         +STAY +
         jsr   BlankDHGR             ; switch to DHGR mode with initial blank screen
         jsr   LoadDHRFile           ; load DHGR file at $4000/main and $4000/aux
         !word kRootDirectory
+        !word $FDFD                 ; SMC
         jsr   LoadDHGRTransition    ; load transition effect code at $6000
         jsr   ExecuteTransitionAt6000AndWait
         ; switch back to HGR mode with initial blank screen on exit
         ; /!\ execution falls through here to BlankHGR
;------------------------------------------------------------------------------
; BlankHGR
; clear and show HGR page 1 without flickering
;
; in:    none
; out:   text page clobbered (but screen holes preserved)
;        A/X/Y=0 (guaranteed by ClearHGR1)
;        $2000..$3FFF cleared
;------------------------------------------------------------------------------
BlankHGR
         jsr   Home
         jsr   ClearHGR1             ; clear hi-res screen 1
         bit   PAGE1                 ; show hi-res screen 1 (now blank)
         ; /!\ execution falls through here to HGRMode
;------------------------------------------------------------------------------
; HGRMode
; twiddles softswitches to set HGR mode (does not set page 1 or 2)
;
; in:    none
; out:   all registers preserved
;------------------------------------------------------------------------------
HGRMode
         bit   $C057
GRMode
         bit   $C052
         bit   $C050
DHGRRTS  rts

;------------------------------------------------------------------------------
; LoadDHGRTransition [private]
; looks up name of next DHGR transition effect in DFX.CONF and loads that file
; at $6000

; in:    gDFXStore has been initialized
;        gGlobalPrefsStore has been initialized
; out:   all registers and flags clobbered
;        $6000..$BFFF/main contains transition effect code
;------------------------------------------------------------------------------
LoadDHGRTransition
         jsr   LoadFile              ; load DHGR transition effects list into $8000
         !word kRootDirectory
         !word kDFXConfFile
-        !word $8000
         jsr   ParseKeyValueList     ; parse DHGR transition effects list into $6000
         !word gDFXStore
         !word -
         !byte 0

         jsr   pref_get              ; get DHGR transition effect from prefs
         !word kNextDFX
         !word gDFXStore
         +STAY ++                    ; A/Y = filename (don't load file yet)
                                     ; X = index of the transition in DFX store
         +LDADDR gDFXStore
         jsr   okvs_next             ; get transition after this one
         +STAY +

         jsr   pref_set              ; update prefs store and save to disk
         !word kNextDFX
+        !word $FDFD                 ; SMC

         jsr   LoadFile              ; now load transition effect code into $6000
         !word kFXDirectory
++       !word $FDFD                ; SMC
         !word $6000
         rts

;------------------------------------------------------------------------------
; DHGRTitleCallback [private]
; callback called by okvs_iter on gSlideshowStore
; to load and display a single DHGR title screenshot

; in:    A/Y contains address of filename (name only, path is always /TITLE.DHGR/)
;        X contains 0-based index of the current record in gSlideshowStore
; out:   all registers and flags clobbered
;        $0800..$1EFF preserved (this contains the gSlideshowStore OKVS data)
;        $2000..$BFFF clobbered by graphics data and transition code
;        $2000..$5FFF/aux clobbered
;------------------------------------------------------------------------------
DHGRTitleCallback
         bit   KBD
         bmi   DHGRRTS

         +STAY +

         jsr   GetGameInfo
         ; if game is not found (C will be set here), it means it can't be played on
         ; this machine due to memory or joystick requirements, so we don't display
         ; it in slideshows
         bcs   DHGRRTS
         stx   gGameToLaunch

         ; load DHGR screenshot at $4000/main and $4000/aux
         jsr   LoadDHRFile
         !word kDHGRTitleDirectory
+        !word $FDFD

         jmp   ExecuteTransitionAt6000AndWait

;------------------------------------------------------------------------------
; DHGRActionCallback [private]
; callback called by okvs_iter on gSlideshowStore
; to load and display a single DHGR action screenshot

; in:    A/Y contains address of filename (name only, path is always /ACTION.DHGR/)
;        X contains 0-based index of the current record in gSlideshowStore
; out:   all registers and flags clobbered
;        $0800..$1EFF preserved (this contains the gSlideshowStore OKVS data)
;        $2000..$BFFF clobbered by graphics data and transition code
;        $2000..$5FFF/aux clobbered
;------------------------------------------------------------------------------
DHGRActionCallback
         bit   KBD
         bmi   DHGRRTS

         +STAY +

         jsr   GetGameInfoInActionSlideshow
         ; if game name is not found (C will be set here), it means the game
         ; can't be played due to memory or joystick requirements, so we hide
         ; it from slideshows
         bcs   DHGRRTS
         stx   gGameToLaunch

         ; load DHGR screenshot at $4000/main and $4000/aux
         jsr   LoadDHRFile
         !word kDHGRActionDirectory
+        !word $FDFD

         ; /!\ execution falls through to ui.wait/ExecuteTransitionAt6000AndWait
