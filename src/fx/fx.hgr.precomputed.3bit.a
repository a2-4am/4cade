;license:MIT
;(c) 2019 by 4am
;
src1           = $F0      ; word
dest1          = $F2      ; word
src2           = $F4      ; word
dest2          = $F6      ; word
src3           = $F8      ; word
dest3          = $FA      ; word
input          = $FE      ; word

copymasks      = $0200    ; $100 bytes but sparse, index is 0..7 but in high 3 bits, so $00, $20, $40...
tmplo          = $0300    ; $C0 bytes
extra_cols     = $02F8    ; $08 bytes
tmphi          = $BF40    ; $C0 bytes
hgrlo3a        = $BC00    ; $80 bytes
hgrlo3b        = $BC80    ; $80 bytes
hgrlo3c        = $BD00    ; $80 bytes
hgrhi3a        = $BD80    ; $80 bytes
hgrhi3b        = $BE00    ; $80 bytes
hgrhi3c        = $BE80    ; $80 bytes

         !source "src/fx/macros.a"

!macro BUILD_EXTRA_COLS {
         ; build lookup table to get $20+y for y in $00..$07
         ldx   #$07
         ldy   #$27
-        tya
         sta   extra_cols-$20, y
         dey
         dex
         bpl   -
}

!macro BUILD_SPARSE_BITMASKS_3BIT {
         ; build sparse lookup tables for bitmasks
         lda   #%10000011
         sta   copymasks

         lda   #%10001100
         sta   copymasks+$20

         lda   #%10110000
         sta   copymasks+$40

         lda   #%11000000
         sta   copymasks+$60

         lda   #%10000001
         sta   copymasks+$80

         lda   #%10000110
         sta   copymasks+$A0

         lda   #%10011000
         sta   copymasks+$C0

         lda   #%11100000
         sta   copymasks+$E0
}

!macro BUILD_3BIT_HGR_LOOKUP_TABLES {
         +BUILD_HGR_LOOKUP_TABLES tmplo, tmphi
         ldx   #$BF
         ldy   #$3F
-        lda   tmplo, x
         sta   hgrlo3c, y
         sta   hgrlo3c+$40, y
         lda   tmphi, x
         sta   hgrhi3c, y
         sta   hgrhi3c+$40, y
         dex
         lda   tmplo, x
         sta   hgrlo3b, y
         sta   hgrlo3b+$40, y
         lda   tmphi, x
         sta   hgrhi3b, y
         sta   hgrhi3b+$40, y
         dex
         lda   tmplo, x
         sta   hgrlo3a, y
         sta   hgrlo3a+$40, y
         lda   tmphi, x
         sta   hgrhi3a, y
         sta   hgrhi3a+$40, y
         dex
         dey
         bpl   -
}

!macro ROW_X_TO_3BIT_BASE_ADDRESSES {
         ; X = $00..$3F, mapping to row 0, 3, 6, 9, 12, ... 189
         lda   hgrlo3a,x
         sta   dest1
         sta   src1
         lda   hgrhi3a,x
         sta   dest1+1
         eor   #$60
         sta   src1+1
         lda   hgrlo3b,x
         sta   dest2
         sta   src2
         lda   hgrhi3b,x
         sta   dest2+1
         eor   #$60
         sta   src2+1
         lda   hgrlo3c,x
         sta   dest3
         sta   src3
         lda   hgrhi3c,x
         sta   dest3+1
         eor   #$60
         sta   src3+1
}

!macro INC_INPUT_AND_LOOP .loop {
         inc   input
         beq   +
         jmp   .loop
+        bit   $c000
         bmi   +
         inc   input+1
         jmp   .loop
+        rts
}

!macro FX_PRECOMPUTED_3BIT .coords {
         +BUILD_3BIT_HGR_LOOKUP_TABLES
         +BUILD_EXTRA_COLS
         +BUILD_SPARSE_BITMASKS_3BIT
         +LDADDR .coords
         +ST16 input
         jmp   InputLoop
Exit3Bit rts
InputLoop
         ldy   #0
         lda   (input),y
         bmi   Exit3Bit              ; if high bit is 1 then we're done
         cmp   #$40
         php
         tax
         +ROW_X_TO_3BIT_BASE_ADDRESSES

         inc   input
         lda   (input),y
         and   #%11100000
         tax
         eor   (input),y
         plp
         bcc   +
         tay
         lda   extra_cols,y
+        tay

         ; 2x3 block
         +COPY_BIT src1, dest1, copymasks
         +COPY_BIT src2, dest2, copymasks
         +COPY_BIT src3, dest3, copymasks

         +INC_INPUT_AND_LOOP InputLoop
         rts
!if * and 1 {
         !byte 0 ;align 2 but avoids the fake allocation bug if it was aligned already
}
}
