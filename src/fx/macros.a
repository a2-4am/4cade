!ifndef _HGRMACROS_ {
         !source "src/macros.a"

; .hgrlo, .hgr1hi will each be filled with $C0 bytes
; based on routine by John Brooks
; posted on comp.sys.apple2 on 2018-07-11
; https://groups.google.com/d/msg/comp.sys.apple2/v2HOfHOmeNQ/zD76fJg_BAAJ
!macro BUILD_HGR_LOOKUP_TABLES .hgrlo, .hgr1hi {
         ldx   #0
-        txa
         and   #$F8
         bpl   +
         ora   #5
+        asl
         bpl   +
         ora   #5
+        asl
         asl
         sta   .hgrlo,x
         txa
         and   #7
         rol
         asl   .hgrlo,x
         rol
         ora   #$20
         sta   .hgr1hi,x
         inx
         cpx   #$C0
         bne   -
}

; .hgrlomirror, .hgr1himirror will each be filled with $C0 bytes
!macro BUILD_HGR_MIRROR_LOOKUP_TABLES .hgrlomirror, .hgr1himirror {
         ldx   #$C0
         ldy   #0
-        tya
         and   #$F8
         bpl   +
         ora   #5
+        asl
         bpl   +
         ora   #5
+        asl
         asl
         sta   .hgrlomirror-1,x
         tya
         and   #7
         rol
         asl   .hgrlomirror-1,x
         rol
         ora   #$20
         sta   .hgr1himirror-1,x
         iny
         dex
         bne   -
}

!macro HGR_CALC {
         asl
         tax
         and   #$F0
         bpl   @calc1
         ora   #$05
@calc1   bcc   @calc2
         ora   #$0A
@calc2   asl
         asl
         sta   $26
         txa
         and   #$0E
         adc   #$10
         asl   $26
         rol
         sta   $27
         eor   #$60
         sta   $3d
         lda   $26
         sta   $3c
}

!macro HGR_ROW_CALC {
         asl
         asl
         asl
         +HGR_CALC
}

; /!\ C must be clear before using this macro
!macro HGR_INC_WITHIN_BLOCK {
         lda   $27
         adc   #$04
         sta   $27
         eor   #$60
         sta   $3d
}

!macro RESET_HGR_CALC {
         lda   $27
         sec
         sbc   #$20
         sta   $27
         eor   #$60
         sta   $3d
}

!macro COPY_BIT .src1, .dest1, .copymasks {
         lda   (.src1),y
         eor   (.dest1),y            ; merge source and destination bits
         and   .copymasks,x          ; isolate the bits to replace, zero the rest
         eor   (.dest1),y            ; unmerge source and destination bits, leaves 'to keep' destination bits intact
         sta   (.dest1),y            ; write the result
}

!macro SWITCH_TO_MASKS .copy {
         lda   #<.copy
         sta   CopyMaskAddr
         lda   #>.copy
         sta   CopyMaskAddr+1
}

; must set N flag based on Y immediately before using this macro
; e.g. LDY, INY, DEY, TYA
!macro IS_Y_OFFSCREEN {
         bpl   +
         sec
         bcs   ++
+        cpy   #40
++
}

_HGRMACROS_=*
}
